---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
const slug = Astro.url.pathname.split('/').pop() || '';
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }
      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
      .edit-controls {
        margin: 1em 0;
        display: none;
      }
      .edit-controls.visible {
        display: block;
      }
      .content[contenteditable] {
        border: 1px dashed #ccc;
        padding: 0.5em;
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <div class="hero-image">
          {heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
        </div>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {updatedDate && (
                <div class="last-updated-on">
                  Last updated on <FormattedDate date={updatedDate} />
                </div>
              )}
            </div>
            <h1>{title}</h1>
            <hr />
          </div>
          <div class="edit-controls">
            <button id="publish">Publish</button>
            <button id="logout">Logout</button>
            <div id="status"></div>
          </div>
          <div class="content">
            <slot />
          </div>
        </div>
      </article>
    </main>
    <Footer />
    <script type="module">
      const pat = sessionStorage.getItem('github_pat');
      const editControls = document.querySelector('.edit-controls') as HTMLElement;
      const contentDiv = document.querySelector('.content') as HTMLElement;
      const publishButton = document.getElementById('publish') as HTMLButtonElement;
      const logoutButton = document.getElementById('logout') as HTMLButtonElement;
      const statusDiv = document.getElementById('status') as HTMLDivElement;

      if (pat) {
        editControls.classList.add('visible');
        contentDiv.setAttribute('contenteditable', 'true');

        logoutButton.addEventListener('click', () => {
          sessionStorage.removeItem('github_pat');
          window.location.reload();
        });

        publishButton.addEventListener('click', async () => {
          const content = contentDiv.innerHTML;
          const filePath = `src/content/blog/${slug}.md`;
          statusDiv.textContent = 'Publishing...';

          try {
            const response = await fetch(`https://api.github.com/repos/YOUR_USERNAME/YOUR_REPO/contents/${filePath}`, {
              method: 'GET',
              headers: { Authorization: `token ${pat}`, Accept: 'application/vnd.github.v3+json' },
            });
            const data = await response.json();
            if (!response.ok) throw new Error('Failed to fetch file SHA');

            const updatedContent = `---
title: '${title}'
description: '${description}'
pubDate: '${pubDate.toISOString().split('T')[0]}'
heroImage: '${heroImage || ''}'
---
${content}`;

            const putResponse = await fetch(`https://api.github.com/repos/YOUR_USERNAME/YOUR_REPO/contents/${filePath}`, {
              method: 'PUT',
              headers: { Authorization: `token ${pat}`, Accept: 'application/vnd.github.v3+json' },
              body: JSON.stringify({
                message: `Update ${slug} via website`,
                content: btoa(unescape(encodeURIComponent(updatedContent))),
                sha: data.sha,
              }),
            });

            if (putResponse.ok) {
              statusDiv.textContent = 'Published successfully!';
            } else {
              statusDiv.textContent = 'Failed to publish. Check your PAT or network.';
            }
          } catch (error) {
            statusDiv.textContent = 'Error: ' + error.message;
          }
        });
      } else {
        contentDiv.removeAttribute('contenteditable');
      }
    </script>
  </body>
</html>